import { NextResponse } from 'next/server';
import { getAuth } from '@clerk/nextjs/server';
import clientPromise from '@/lib/mongodb';
import { ObjectId } from 'mongodb';

export const dynamic = 'force-dynamic';

export async function GET(req) {
  const { userId } = getAuth(req);
  if (!userId) {
    return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const client = await clientPromise;
    const db = client.db('newScrap');
    const data = await db.collection('scrap_sales')
      .find({ sellerId: userId })
      .sort({ date: -1 })
      .toArray();

    return NextResponse.json({
      success: true,
      data: data.map(item => ({
        ...item,
        _id: item._id.toString(),
        date: item.date ? new Date(item.date).toISOString() : null
      }))
    });
  } catch (error) {
    console.error('GET Error:', error);
    return NextResponse.json({ success: false, error: 'Failed to fetch scrap sales' }, { status: 500 });
  }
}

export async function POST(req) {
  const { userId } = getAuth(req);
  if (!userId) {
    return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const body = await req.json();
    const { scrapType, kilos, price } = body;

    if (!scrapType || !kilos || !price) {
      return NextResponse.json({ success: false, error: 'Missing required fields' }, { status: 400 });
    }

    const client = await clientPromise;
    const db = client.db('newScrap');

    const result = await db.collection('scrap_sales').insertOne({
      scrapType,
      kilos: parseFloat(kilos),
      price: parseFloat(price),
      sellerId: userId,
      date: new Date()
    });

    return NextResponse.json({
      success: true,
      data: {
        _id: result.insertedId.toString(),
        scrapType,
        kilos: parseFloat(kilos),
        price: parseFloat(price),
        sellerId: userId,
        date: new Date().toISOString()
      }
    });
  } catch (error) {
    console.error('POST Error:', error);
    return NextResponse.json({ success: false, error: 'Failed to create scrap sale' }, { status: 500 });
  }
}

export async function DELETE(req) {
  const { userId } = getAuth(req);
  if (!userId) {
    return NextResponse.json({ success: false, error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const { ids } = await req.json();
    if (!ids || !Array.isArray(ids)) {
      return NextResponse.json({ success: false, error: 'Invalid request body' }, { status: 400 });
    }

    const client = await clientPromise;
    const db = client.db('newScrap');

    const result = await db.collection('scrap_sales').deleteMany({
      _id: { $in: ids.map(id => new ObjectId(id)) },
      sellerId: userId
    });

    return result.deletedCount > 0
      ? NextResponse.json({ success: true, deletedCount: result.deletedCount })
      : NextResponse.json({ success: false, error: 'No records found to delete' }, { status: 404 });

  } catch (error) {
    console.error('DELETE Error:', error);
    return NextResponse.json({ success: false, error: 'Failed to delete scrap sale(s)' }, { status: 500 });
  }
}
