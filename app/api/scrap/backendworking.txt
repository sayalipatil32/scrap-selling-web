import { NextResponse } from 'next/server';
import { getAuth } from '@clerk/nextjs/server';
import clientPromise from '@/lib/mongodb';

export async function GET(req) {
  const { userId } = getAuth(req);
  
  if (!userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const client = await clientPromise;
    const db = client.db(process.env.DB_NAME);
    const data = await db.collection('scrap_sales')
      .find({ sellerId: userId })
      .sort({ date: -1 })
      .toArray();
      
    return NextResponse.json(data.map(item => ({
      ...item,
      _id: item._id.toString(),
      date: item.date.toISOString()
    })));
  } catch (error) {
    console.error('GET Error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch scrap sales' },
      { status: 500 }
    );
  }
}

export async function POST(req) {
  const { userId } = getAuth(req);
  
  if (!userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  try {
    const body = await req.json();
    
    // Basic validation
    if (!body.scrapType || !body.kilos || !body.price) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    const client = await clientPromise;
    const db = client.db(process.env.DB_NAME);
    
    const result = await db.collection('scrap_sales').insertOne({
      scrapType: body.scrapType,
      kilos: parseFloat(body.kilos),
      price: parseFloat(body.price),
      sellerId: userId,
      date: new Date().toISOString()
    });

    return NextResponse.json({ 
      success: true, 
      insertedId: result.insertedId.toString()
    });

  } catch (error) {
    console.error('POST Error:', error);
    return NextResponse.json(
      { error: 'Failed to create scrap sale' },
      { status: 500 }
    );
  }
}

export const dynamic = 'force-dynamic';
